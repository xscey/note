<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>xscey.github.io</title>
    <description>https://xscey.github.io</description>
    <link>https://xscey.github.io/</link>
    <atom:link href="https://xscey.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 20 Jul 2016 19:58:26 +0900</pubDate>
    <lastBuildDate>Wed, 20 Jul 2016 19:58:26 +0900</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>理論自炊学概論①</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;理論自炊学の目標と意義&lt;/h2&gt;

&lt;p&gt;自炊ほど難しいものはない。自炊がどれほど困難であるかについては、しばしば誤解される節があり、特に応用自炊学者は日々自炊を実践しているためか、甘い見通しを持っていることが多いと思われる。さる応用自炊学者はその著作『初等自炊論』の中で、「極端な例を挙げると、米を研ぎ、『はじめちょろちょろ中ぱっぱ、赤子泣いても蓋取るな』を遵守しつつ直火で米を炊き上げることのできる人が、あなたの周囲に何人存在するだろうか？」と問いかけ、自炊の難しさを示そうとしている。しかし、こんなレベルの例で「極端な例」だというのは、笑止千万と言わざるを得ない。自炊の困難さは、こんなものではないのだ。&lt;/p&gt;

&lt;p&gt;自炊を行うには、第一に、自力で食材を調達せねばならない。つまり、広大な畑でも所有していない限り、食材を購入せねばならぬのである。これこそ、まず最初に問題にすべき事柄であろう。米を直火で炊き上げられるかどうかなどは、食料調達という大問題に比べれば些細な問題に過ぎないと断言できる。食料の調達は、実に容易ならざることだ。何が食材であり、何が食材でないかを判別することが、非常に困難だからである。ソース一つにしても食材かどうかの判別は難しく、何が食べられるソースで何が食べられないソースかという基準は、明確ではない。ソースとは調味料であり、通常は食材のカテゴリーに含まれるはずだが、それにもかかわらず、ソースでありかつ食材でないものが存在し、例えばコンピュータプログラムのソースは食べられない（ＩＴ業界は厳しく、プログラムのソースを書いても食べてゆけないほどである）。さらに、空腹が最高のソースであることは広く知られるが、しかし空腹を食べるということはできない。空腹もまた、ソースであるにもかかわらず食材ではないのである（ただし、空腹を食べることができるかどうかについては、現在に到るまでいかなる科学的研究も行われておらず、本当に空腹が食材でないのかは議論の余地が残されている。空腹を食べて空腹を満たすことがもし可能ならば、空腹による空腹の解消を図るというメタ空腹学の理論がここに成立し、食糧問題は抜本的に解決されるであろう）。スーパーの食品売り場で販売されていれば食材と見做してよいかといえば、そうでもない。例えば納豆のように、あたかも食材であるかのようにしてスーパーの売り場に並んでいるにもかかわらず、実際には腐敗しており食べることができないという製品も存在するからである。このように見てゆくと、食材であるか否かの判定は実に困難であり、それゆえ正しく食材を調達することは大変な難事だということは余りにも明らかであろう。第二に、自炊を行うには、調理道具を揃えていなければならない。包丁・まな板のように食材を食べやすく切るためのもの、計量スプーン・計量カップのように調味料などを適切な分量だけ量り取るためのもの、フライパン・鍋のように食材を火にかけるものなどは基本中の基本であるが、料理のレパートリイを広げるためには、他にも、ピーラー、ミキサー、泡立て器、電子レンジ、オーブン、トースター、かまど、焚き火するための庭、石焼き芋をつくるための石、漬物を漬けるための漬物石、懐石料理をつくるための懐石、食用魚を一時的に泳がせておく用の水槽に入れるための石、など、石だけでも数種類は必要であり、適切な石を拾い集めるだけでも並々ならぬ体力を要する（この際、石マニアと間違われぬよう充分に注意しなければならず、精神的な疲労も計り知れない）。このように、調理道具の入手は、気が滅入るほど困難な作業である。第三に、自炊を行うには、自力で調理せねばならない。調理そのものの難しさもあるが、それ以上に問題なのは、調理に先立ってまず物置と化した禍々しき台所の流しを片付け、焦げ付いたフライパンをピカピカに磨き上げ、水が流れなくなった排水口の詰まりを何とかして取り除く必要があるということだ。もし、これらのことができなければ調理はできないのだし、もしこれらのことができたならば、それだけで疲労困憊してしまい、せっかく調理可能な環境が整っているのに調理どころではなくなってしまう。また、もし台所が既に清潔であり整頓され、調理可能な状態にあったとすれば、その綺麗な状態を保ちたいという欲求が生まれ、調理する気力が削がれてしまう。いずれにしても、調理しようとする前段階で躓いてしまうのである。&lt;/p&gt;

&lt;p&gt;かくも自炊は難しい。それにもかかわらず、なにゆえに我々は自炊をせねばならないというのか。なぜ、他人に調理してもらうのではなく、自力で調理せねばならぬというのか。自炊を行う目的とは何か。これこそが、理論自炊学という学問の探求すべき問いである。理論自炊学とは、自炊を根本から問い直し、反省的に考察する営みなのである。応用自炊学とは、この点において大きく異なる。応用自炊学で探求される事柄は、どうやって自炊を行うかという応用的側面であり、そこでは自炊を行わねばならぬことは自明と見做される。しかし、自炊を行わねばならぬことを何の疑いも差し挟まずに受け入れてしまうことは、きわめて危険なことだ。本当は、自炊をしていては野菜不足に陥り健康を害すると判明するかもしれないし、店に行って食べたほうが栄養価が高く美味しい料理が食べられ、その上、安く済むと判明するかもしれないのだ。本当に自炊をすべきか、理論自炊学ではこれを徹底的に探求してゆき、自炊の正当化を試みる。そしてまた、理論自炊学では、自炊の目的を探求してゆく中で、自炊とは何か（すなわち何を指して自炊と呼ぶべきであるのか）という根本問題についても切り込んでゆく。&lt;/p&gt;

&lt;p&gt;なお、今後、議論を進めてゆく上での利便性を図るために、他炊という用語を使うこととする。他炊とは、自炊でないことをいう。&lt;/p&gt;
</description>
        <pubDate>Wed, 20 Jul 2016 00:00:00 +0900</pubDate>
        <link>https://xscey.github.io/blog/2016/07/20/jisui-jo.html</link>
        <guid isPermaLink="true">https://xscey.github.io/blog/2016/07/20/jisui-jo.html</guid>
        
        <category>note</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>LOG</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.mediafire.com/?4oepdtmrah3do&quot;&gt;ここ&lt;/a&gt;からmactypeの設定をダウンロード。これでかなり綺麗に描画されるようになった。嬉しい。
上のURLは&lt;a href=&quot;http://d.hatena.ne.jp/consbiol/20120413/1334247449&quot;&gt;このサイト&lt;/a&gt;から見つけた。&lt;/p&gt;

</description>
        <pubDate>Sun, 17 Jul 2016 00:00:00 +0900</pubDate>
        <link>https://xscey.github.io/blog/2016/07/17/log.html</link>
        <guid isPermaLink="true">https://xscey.github.io/blog/2016/07/17/log.html</guid>
        
        <category>note</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>LOG</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://blog.goo.ne.jp/cramel_2008/e/8363b3de2d7315068bfe025c84e71f11&quot;&gt;これ&lt;/a&gt;を参考に、設定。HDDアクセス過多を減らそうといういつもの試み。&lt;/p&gt;

&lt;p&gt;以下引用。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;　その方法を紹介すると、Windows10のスタートボタンを右クリックして「システム」を呼び出す。次に「コンピューター名、ドメインおよびワークグループの設定」から「設定の変更」を開く。「システムのプロパティ」が表示されるので「詳細設定」を開くと「パフォーマンス」の「視覚効果、プロセッサのスケジュール、メモリ使用、および仮想メモリ」を選択して「設定」を開くと「パフォーマンスオプションのサブ画面が表示されるので「詳細設定」を選択する。そして「仮想メモリ」の「変更」ボタンを押すと「全てのドライブのページングファイルファイルサイズを自動的に管理する」にチェックが入っているが、これを手動に設定して「カスタムサイズ、Ｃ：」に初期サイズ「4096」最大サイズ「16384」と入力して「ＯＫ」ボタンを押し、パネルを全て閉じてパソコンを再起動させる。これでこれでハードディスクの動きが止まった。&lt;/p&gt;

  &lt;p&gt;　さてこの設定画面だが、昔使っていたWindowsXPの仮想メモリの設定とほとんど同じ物であり、ある程度メモリを多く積んいる場合にこの設定はかなり有効だたが、Windows10の仮想メモリーが問題だと聞いて真っ先にこの設定を思い出した。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Wed, 13 Jul 2016 00:00:00 +0900</pubDate>
        <link>https://xscey.github.io/blog/2016/07/13/log.html</link>
        <guid isPermaLink="true">https://xscey.github.io/blog/2016/07/13/log.html</guid>
        
        <category>note</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>校正割り振りスクリプト</title>
        <description>&lt;p&gt;校正割り振りスクリプトをつくった。校正割り振りっていうより、「山分け問題」の解決をするスクリプトって言ったほうがいいか。というかこういう問題ってふつうどう呼ばれているのだろう。検索してもいまいちこれといったものが見つからなかった。「山分け問題」もしくは「分配問題」と呼んでいる本がgoogle booksで見つかったからこれが一般的呼称なのかもしれない。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;背景&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;文藝サークルでは、文集や部誌を発行するさい、校正係を置いている。&lt;/li&gt;
  &lt;li&gt;ここで校正係とは、部員の原稿を事前に読み、誤字脱字などをチェックする係である。&lt;/li&gt;
  &lt;li&gt;各校正係は、すべての原稿に目を通す必要はなく、自分の担当原稿のみに目を通せばよい（各人がすべての原稿に目を通すのは非効率的であるため）。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;問題&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;校正係へ原稿を割り振るとき、各人が読まねばならぬ原稿の文字数をできるかぎり揃えたい。&lt;/li&gt;
  &lt;li&gt;しかし、これを手作業で揃えようとすると、面倒である。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-2&quot;&gt;解法&lt;/h2&gt;
&lt;p&gt;以下に示すpythonスクリプトを書いた。すべての可能な組み合わせを考えて、標準偏差を出し、標準偏差の最も低い組み合わせを出力するようにしてある。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# -*- coding: utf-8 -*-
import math
import itertools


list1 = [1011,8595,5064,4978,6751,108,30218,732,&#39;|&#39;,&#39;|&#39;,&#39;|&#39;]

junretu = [i for i in itertools.permutations(list1)] # すべての順列をひたすら出力
goodp = [] # good permitation
listhozon = [] # list保存

# 標準偏差 standard deviation
sd = -1

for p in junretu:
	list2 = []
	p = list(p)
	i = [i for (i, x) in enumerate(p) if x == &#39;|&#39;] # 区切り位置の取得
	
	# 取得した区切り位置を元に数字の組み合わせのリストを作る
	c = 0
	for x in i:
		list2.append(p[c:x])
		c = x+1
	else:
		p.append(&#39;dummy&#39;)
		list2.append(p[c:-1])
	
	# 空のリストを持っているかどうか判定
	kara = 0
	for x in list2:
		if x == []:
			kara = 1
			break
	if kara == 0:
		#print list2
		list3 = []
		total = 0
		for x in list2:
			for y in x:
				total += y
			list3.append(total)
			total= 0
		
		#print list3
	
		ave = sum(list3)/len(list3)
		total = 0
		for i in range(len(list3)):
			total += (list3[i] - ave)**2
		if sd == -1:
			sd = math.sqrt(total/len(list3))
			goodp = p
			listhozon = list3
		elif sd &amp;gt; math.sqrt(total/len(list3)):
			sd = math.sqrt(total/len(list3))
			goodp = p
			listhozon = list3
del goodp[-1]
print sd
print goodp
print listhozon
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;　&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;追記&lt;/h2&gt;
&lt;p&gt;流石に適当すぎて、リストが多すぎるとすぐフリーズしてしまうことが判明した。やっぱりそうか。悲しい。メモリを食い過ぎてしまうのだ。改善したいがなかなか資料が見つからない。&lt;a href=&quot;http://pythonlife.seesaa.net/article/243207369.html&quot;&gt;ここ&lt;/a&gt;などが参考になるかもしれない。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;さらに追記&lt;/h2&gt;
&lt;p&gt;pythonスクリプトに渡すリストの要素数が10以下ならば、フリーズしないことが経験的にわかった。用法を守って使えばまずまず使えるソフトだ。&lt;/p&gt;

</description>
        <pubDate>Sun, 10 Jul 2016 00:00:00 +0900</pubDate>
        <link>https://xscey.github.io/blog/2016/07/10/kousei-script.html</link>
        <guid isPermaLink="true">https://xscey.github.io/blog/2016/07/10/kousei-script.html</guid>
        
        <category>note</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>LOG</title>
        <description>&lt;p&gt;おおお。ようやくGitとGitHubの操作手順がわかりかけてきた（仕組みを理解したとは到底言えないが）。&lt;a href=&quot;http://ncode.syosetu.com/n3259db/&quot;&gt;この記事&lt;/a&gt;に感謝。
追記：githubはもはやひとつのプログラミング言語みたいなものだから、なかなかムズい。&lt;/p&gt;
</description>
        <pubDate>Sun, 17 Jan 2016 00:00:00 +0900</pubDate>
        <link>https://xscey.github.io/blog/2016/01/17/log.html</link>
        <guid isPermaLink="true">https://xscey.github.io/blog/2016/01/17/log.html</guid>
        
        <category>note</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>LOG</title>
        <description>&lt;p&gt;atom editor を入れてみる。このままではmactypeが効かないので、以下を参考に設定をいじる。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;2015年6月26日に1.0.0が公開されたAtom Editorですが、WindowsではDirectWriteがデフォルトで有効になっており、MacTypeなどのgdi++系ソフトとの相性が良くありません。&lt;/p&gt;

  &lt;p&gt;一応DirectWriteを無効にする方法があるのでここに書いておきます。&lt;/p&gt;

  &lt;p&gt;Atom Editorは終了しておきます。
「app.asar」をバイナリエディタ（Stirlingがオススメ）で開きます。
場所はC:\Users\（ユーザー名）\AppData\Local\atom\app-1.0.0\resources\app.asar
「’direct-write’: true,」で検索し、「’direct-write’:false,」に書き換えます。
trueの前の半角スペースは無くてもいいので、半角スペース+trueをfalseに書き換えます。
残念なことに、app.asarファイルはバージョンアップで更新されるので、バージョンアップの度に毎回やらなければいけません。&lt;/p&gt;

  &lt;p&gt;一応Atom Editorのソースコードを（Electronも含めて）読みましたが、現時点ではこれ以外に方法は無さそうです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;まさかのバイナリエディタが必要とは。&lt;/p&gt;

</description>
        <pubDate>Wed, 30 Dec 2015 00:00:00 +0900</pubDate>
        <link>https://xscey.github.io/blog/2015/12/30/log.html</link>
        <guid isPermaLink="true">https://xscey.github.io/blog/2015/12/30/log.html</guid>
        
        <category>note</category>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
